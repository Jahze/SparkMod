// Generated by CoffeeScript 1.6.2
var $sparkmod_content, attempt_save, btn_group, button, confirmMapChange, current_plugin_file, current_plugin_name, editor, editor_themes, human_teams, initialize_sparkmod_tab, is_connected_to_server, is_loading_file, is_save_pending, is_saving, is_server_loading, is_server_loading_response, lastPerfTime, load_file, load_js, load_stylesheet, loaded_themes, maxChatPos, no_players_html, now, on_disconnected, on_reconnected, on_save_failed, performance_data, performancecontent_onShow, rcon, rcon_commands, refreshBanList, refreshChat, refreshCount, refreshInfo, refreshPerformance, reset_save_button, save_active_file, seconds_to_hhmmss, seconds_to_time, sendChatMessage, sendConfirmedRcon, sendManualBan, sendManualRcon, server_loading_html, shorten_status, showPerfChart,
  __slice = [].slice;

rcon_commands = ['sv_ban', 'sv_unban', 'sv_kick', 'sv_changemap', 'sv_switchteam', 'sv_rrall', 'sv_randomall', 'sv_eject', 'sv_slay', 'sv_tsay', 'sv_psay', 'sv_say', 'sv_vote', 'sv_tournament', 'sv_cheats', 'sv_reset', 'sv_listbans', 'cyclemap', 'sv_autobalance', 'kick', 'status', 'say', 'reset', 'sm', 'sm cmds', 'sm version', 'sm plugins', 'sm plugins info', 'sm plugins list', 'sm plugins load', 'sm plugins refresh', 'sm plugins reload', 'sm plugins unload', 'sm plugins unload_all'];

human_teams = ["Ready Room", "Marines", "Aliens", "Spectator"];

no_players_html = "<tr id=\"noplayers\"><td colspan=\"10\" style=\"text-align: center;\">No Connected Players</td></tr>";

refreshCount = 0;

maxChatPos = 0;

lastPerfTime = 0;

performance_data = [[], []];

shorten_status = false;

seconds_to_hhmmss = function(seconds) {
  var hours, minutes;

  hours = Math.floor(seconds / 3600);
  minutes = Math.floor((seconds - (hours * 3600)) / 60);
  seconds = Math.round(seconds - hours * 3600 - minutes * 60);
  if (hours < 10) {
    hours = '0' + hours;
  }
  if (minutes < 10) {
    minutes = '0' + minutes;
  }
  if (seconds < 10) {
    seconds = '0' + seconds;
  }
  return "" + hours + ":" + minutes + ":" + seconds;
};

seconds_to_time = function(seconds) {
  var hours, minutes, time, tm;

  tm = new Date(seconds * 1000);
  hours = tm.getUTCHours();
  minutes = tm.getUTCMinutes();
  seconds = tm.getUTCSeconds();
  time = "";
  if (hours) {
    if (shorten_status) {
      time += " h ";
    } else {
      time += "" + hours + " hour" + (hours > 1 ? 's' : '') + " ";
    }
  }
  if (minutes) {
    time += minutes + " min ";
  }
  if (!time.length ? seconds : void 0) {
    time += seconds + " sec ";
  }
  return time;
};

refreshInfo = function() {
  return $.get('/?request=json', function(data) {
    var $player, connTime, connectionTime, currentTime, player, players, prevRefreshCount, status_length, _i, _len;

    if (data != null) {
      $("#servermap").html(data.map);
      $("#serveruptime").html(seconds_to_time(data.uptime));
      $("#servername").html(data.server_name);
      $("#serverrate").html((Math.round(data.frame_rate * 100) / 100).toFixed(2));
      status_length = $('#serverstatus').text().match(/\S/g).length;
      if (shorten_status) {
        status_length += 5;
      }
      shorten_status = status_length > 45;
      prevRefreshCount = $("#playerstable tr td").find(".lastupdated").val();
      if (prevRefreshCount == null) {
        prevRefreshCount = 0;
      }
      currentTime = (new Date()).getTime() / 1000;
      connectionTime = currentTime;
      if (players = data.player_list) {
        for (_i = 0, _len = players.length; _i < _len; _i++) {
          player = players[_i];
          player.humanTeam = human_teams[player.team] || player.team;
          if (player.iscomm) {
            player.humanTeam = player.humanTeam + " (*)";
          }
          $player = $("#playerstable ." + player.steamid);
          if (!$player.length) {
            player.lastupdated = refreshCount;
            player.connTimeFormatted = seconds_to_hhmmss(connectionTime - currentTime);
            player.connTime = currentTime;
            player.resources = player.resources.toFixed(2);
            $("#playerstable tbody").append(tmpl("player_row", player));
          } else {
            $player.find(".name").text(player.name);
            $player.find(".team").text(player.humanTeam);
            $player.find(".score").text(player.score);
            $player.find(".kd").text("" + player.kills + "/" + player.deaths);
            $player.find(".res").text(Math.floor(player.resources));
            $player.find(".ping").text(player.ping);
            connTime = currentTime - parseInt($player.find(".connectiontime").val());
            $player.find(".connTime").text(seconds_to_hhmmss(connTime));
            $player.find(".lastupdated").val(refreshCount);
            $player.attr("id", refreshCount);
          }
        }
      }
      if (players != null ? players.length : void 0) {
        $("#noplayers").remove();
        if (refreshCount) {
          $("#playerstable").trigger("update");
        } else {
          $("#playerstable").tablesorter({
            sortList: [[9, 0]]
          });
        }
      } else if (!$("#playerstable #noplayers").length) {
        $("#playerstable tbody").append(no_players_html);
      }
      $("#playerstable tr").each(function(i) {
        var id;

        if (!i) {
          return;
        }
        id = parseInt($(this).attr("id"));
        if (!id) {
          return;
        }
        if (id === refreshCount) {
          return $(this).find("td.num").text("" + i + ".");
        } else {
          return $(this).remove();
        }
      });
      $("#serverplayers").text("" + ((players != null ? players.length : void 0) || 0) + " player" + ((players != null ? players.length : void 0) === 1 ? '' : 's'));
      return refreshCount++;
    }
  });
};

refreshBanList = function() {
  return $.get('/?request=getbanlist', function(bans) {
    var ban, _i, _len, _results;

    $("#banstable tbody").empty();
    _results = [];
    for (_i = 0, _len = bans.length; _i < _len; _i++) {
      ban = bans[_i];
      if (!ban.reason) {
        ban.reason = "None provided";
      }
      _results.push($("#banstable tbody").append(tmpl("ban_row", ban)));
    }
    return _results;
  });
};

refreshChat = function(once) {
  return $.get('/?request=getchatlist', function(entries) {
    var entry, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = entries.length; _i < _len; _i++) {
      entry = entries[_i];
      if (entry.id > maxChatPos) {
        $("#chatlog").text($("#chatlog").text() + tmpl("chat_row", entry));
        maxChatPos = entry.id;
      }
      _results.push($("#chatlog").prop({
        scrollTop: $("#chatlog").prop("scrollHeight")
      }));
    }
    return _results;
  });
};

showPerfChart = function() {
  $("#perfchart").empty();
  return $.jqplot("perfchart", performance_data, {
    title: "Server Performance",
    axes: {
      xaxis: {
        renderer: $.jqplot.DateAxisRenderer,
        tickOptions: {
          formatString: "%H:%M"
        },
        tickInterval: "30 minutes"
      },
      yaxis: {
        min: 0,
        tickInterval: 5
      }
    },
    legend: {
      show: true,
      location: "se",
      labels: ["Players", "Tickrate"]
    },
    seriesDefaults: {
      markerOptions: {
        show: false
      }
    }
  });
};

refreshPerformance = function() {
  var $request;

  $request = $.get('/?request=getperfdata');
  $request.done(function(entries) {
    var entry, lastPerfTIme, _i, _len;

    for (_i = 0, _len = entries.length; _i < _len; _i++) {
      entry = entries[_i];
      entry.time *= 1000;
      if (entry.time < lastPerfTime) {
        continue;
      }
      performance_data[0].push([entry.time, entry.players]);
      performance_data[1].push([entry.time, entry.tickrate]);
      lastPerfTIme = entry.time;
    }
    showPerfChart();
    if (!performance_data.length) {
      return setTimeout(refreshPerformance, 3000);
    }
  });
  return $request.fail(function() {
    if (!performance_data.length) {
      return setTimeout(refreshPerformance, 3000);
    }
  });
};

performancecontent_onShow = function() {
  return showPerfChart();
};

rcon = function(command) {
  $.get("/?request=json&command=Send&rcon=" + command);
  if (command.match(/sv_(un)?ban/gi)) {
    return setTimeout(refreshBanList, 500);
  }
};

sendManualRcon = function() {
  rcon($("input[name=manual_rcon]").val());
  return $("input[name=manual_rcon]").val("");
};

sendConfirmedRcon = function(message, command) {
  if (confirm(message)) {
    return rcon(command);
  }
};

confirmMapChange = function(map) {
  if (confirm("Change map to " + map + "?")) {
    return rcon("sv_changemap " + map);
  }
};

sendChatMessage = function() {
  var chatMessage, chatType;

  chatType = $("select[name=chatmessagetype]").val();
  chatMessage = $("input[name=chat_message]").val();
  $("input[name=chat_message]").val("");
  if (chatType === "all") {
    return rcon("sv_say " + chatMessage);
  } else if (chatType === "marines") {
    return rcon("sv_tsay 1 " + chatMessage);
  } else {
    if (chatType === "aliens") {
      return rcon("sv_tsay 2 " + chatMessage);
    }
  }
};

sendManualBan = function() {
  var duration, field, reason, steam_id, _i, _len, _ref, _results;

  steam_id = parseInt($("input[name=addban_steamid]").val());
  duration = parseInt($("input[name=addban_duration]").val());
  reason = $("input[name=addban_reason]").val();
  if (duration < 0) {
    duration = 0;
  }
  rcon("sv_ban " + steam_id + " " + duration + " " + reason);
  _ref = ['steamid', 'duration', 'reason'];
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    field = _ref[_i];
    _results.push($("input[name=addban_" + field + "]").val(""));
  }
  return _results;
};

$(document).ready(function() {
  var server_status, whitespace_size;

  $("#tabs > li").click(function() {
    var _name;

    $("#tabs > li").each(function() {
      $(this).removeClass("active");
      return $("#" + $(this).attr("rel")).hide();
    });
    $(this).addClass("active");
    $("#" + $(this).attr("rel")).show();
    return typeof window[_name = $(this).attr("rel") + "_onShow"] === "function" ? window[_name]() : void 0;
  });
  $('.rconbutton').click(function() {
    return rcon($(this).attr("command"));
  });
  setInterval(refreshInfo, 2000);
  refreshInfo();
  setInterval(refreshChat, 2000);
  refreshChat();
  setInterval(refreshBanList, 300000);
  refreshBanList();
  setInterval(refreshPerformance, 60000);
  refreshPerformance();
  $("input[name=manual_rcon]").bind("keypress", function(e) {
    if (e.keyCode === 13) {
      sendManualRcon();
      return e.preventDefault();
    }
  });
  $("input[name=chat_message]").bind("keypress", function(e) {
    if (e.keyCode === 13) {
      sendChatMessage();
      return e.preventDefault();
    }
  });
  $("input[name=manual_rcon]").typeahead({
    source: rcon_commands
  });
  $('#serverstatus img').remove();
  $('#marineres, #alienres').remove();
  server_status = $('#serverstatus').html();
  whitespace_size = server_status.match(/&nbsp;&nbsp;\s*&nbsp;&nbsp;\s+$/)[0].length;
  return $('#serverstatus').html(server_status.slice(0, +(-whitespace_size - 1) + 1 || 9e9));
});

(function() {
  var cache, tmpl;

  cache = {};
  return this.tmpl = tmpl = function(str, data) {
    var fn;

    fn = (!/\W/.test(str) ? cache[str] = cache[str] || tmpl(document.getElementById(str).innerHTML) : new Function("obj", "var p=[],print=function(){p.push.apply(p,arguments);};" + "with(obj){p.push('" + str.replace(/[\r\t\n]/g, " ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g, "$1\r").replace(/\t=(.*?)%>/g, "',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'") + "');}return p.join('');"));
    if (data) {
      return fn(data);
    } else {
      return fn;
    }
  };
})();

server_loading_html = "<html><head><meta http-equiv='refresh' content='5'></head><body>Loading server...<body></html>";

editor_themes = "ambiance blackboard cobalt eclipse elegant erlang-dark lesser-dark midnight monokai neat night rubyblue twilight vibrant-ink xq-dark xq-light";

editor_themes = editor_themes.split(' ');

editor_themes.push('solarized dark');

editor_themes.push('solarized light');

loaded_themes = ['vibrant-ink'];

is_loading_file = false;

is_save_pending = false;

is_saving = false;

current_plugin_file = null;

current_plugin_name = null;

editor = null;

is_server_loading = false;

is_connected_to_server = true;

load_js = function() {
  var file_name, file_names, script, _i, _len, _results;

  file_names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _results = [];
  for (_i = 0, _len = file_names.length; _i < _len; _i++) {
    file_name = file_names[_i];
    script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = "/js/" + file_name + ".js";
    _results.push(document.getElementsByTagName('head')[0].appendChild(script));
  }
  return _results;
};

now = function() {
  return new Date().getTime() / 1000;
};

is_server_loading_response = function(resp) {
  return typeof resp === "string" && resp.indexOf(server_loading_html) !== -1;
};

load_stylesheet = function() {
  var css_subpaths, subpath, _i, _len, _results;

  css_subpaths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  _results = [];
  for (_i = 0, _len = css_subpaths.length; _i < _len; _i++) {
    subpath = css_subpaths[_i];
    _results.push($('head').append($('<link rel="stylesheet" type="text/css"/>').attr('href', "/css/" + subpath + ".css")));
  }
  return _results;
};

btn_group = function(el) {
  return $('<div class="btn-group"/>').append(el);
};

button = function(name, display_name, classes) {
  return $('<button class="btn"/>').attr('id', "" + name + "-button").addClass(classes).html(display_name);
};

attempt_save = function() {
  var req;

  $('#save-button').addClass('btn-primary').text('Saving...');
  req = $.post('/', {
    request: 'savepluginfile',
    file: current_plugin_file,
    contents: editor.getValue()
  }, reset_save_button);
  req.done(function(response) {
    if (is_server_loading_response(response)) {
      return on_save_failed();
    } else {
      is_saving = false;
      return reset_save_button();
    }
  });
  return req.fail(on_save_failed);
};

reset_save_button = function() {
  $('#save-button').removeClass('btn-primary').removeClass('btn-danger');
  return $('#save-button').text('Save changes').attr('title', '');
};

save_active_file = function() {
  if (is_save_pending) {
    is_saving = true;
    attempt_save();
    return is_save_pending = false;
  }
};

load_file = function(file_path) {
  save_active_file();
  if (!is_connected_to_server || is_server_loading) {
    alert("You are not currently connected to the server");
    return;
  }
  is_loading_file = true;
  return $.getJSON('/', {
    request: 'filecontents',
    file: file_path
  }, function(response) {
    if (response.error) {
      alert(response.error);
      return is_loading_file = false;
    }
    current_plugin_name = response.plugin;
    current_plugin_file = response.file;
    editor.setValue(response.contents);
    is_loading_file = false;
    return $('#reload-plugin-button').text("Reload " + current_plugin_name).show();
  });
};

on_save_failed = function() {
  $('#save-button').removeClass('btn-primary').addClass('btn-danger');
  return $('#save-button').text('Save failed').attr('title', 'File will be saved as soon as the server comes back online');
};

on_disconnected = function() {
  var toggle_redplug_fade;

  toggle_redplug_fade = function() {
    return $("#redplug").fadeToggle('fast', function() {
      if (!is_connected_to_server) {
        return toggle_redplug_fade();
      }
    });
  };
  $('#server-loading').hide();
  return toggle_redplug_fade();
};

on_reconnected = function() {
  if (is_saving) {
    return attempt_save();
  }
};

$sparkmod_content = null;

initialize_sparkmod_tab = function() {
  var $button_group, $dropdown_menu, $editor_theme_button, $file_tree_container, $sparkmod_body, $text_area, $theme_list, $toolbar, theme, _i, _len;

  $toolbar = $('<div class="btn-toolbar center"/>');
  $toolbar.append(btn_group(button('save', 'Save changes')));
  $toolbar.append(btn_group(button('reload-plugin', 'Reload plugin', 'btn-primary')));
  $editor_theme_button = button('editor-theme', 'Change editor theme', 'btn-primary');
  $editor_theme_button.append($('<span class="caret"/>'));
  $theme_list = $('<li id="theme-list"/>');
  for (_i = 0, _len = editor_themes.length; _i < _len; _i++) {
    theme = editor_themes[_i];
    $theme_list.append($('<a href="#"/>').text(theme));
  }
  $dropdown_menu = $('<ul class="dropdown-menu"/>').append($theme_list);
  $button_group = btn_group($editor_theme_button).append($dropdown_menu);
  $toolbar.append($button_group);
  $sparkmod_body = $('<div class="well"/>');
  $file_tree_container = $('<div id="file-tree-container" class="column"/>').text('Loading...');
  $text_area = $('<textarea id="code-editor" name="code-editor" class="column"/>');
  $text_area.text('-- Select a file to open it');
  $sparkmod_body.append($file_tree_container);
  $sparkmod_body.append($text_area);
  $sparkmod_content = $('<div id="sparkmodcontent" class="row"/>');
  $sparkmod_content.append($toolbar).append($sparkmod_body);
  $('.content-span').append($sparkmod_content);
  $('#editor-theme-button').dropdown();
  $('#theme-list a').click(function() {
    var theme_name;

    theme = $(this).text();
    theme_name = theme.split(' ')[0];
    if (loaded_themes.indexOf(theme_name) < 0) {
      loaded_themes.push(theme_name);
      load_stylesheet("theme/" + theme_name);
    }
    return editor.setOption('theme', theme);
  });
  $('#file-tree-container').fileTree({
    script: '/',
    root: 'sparkmod/plugins'
  }, function(file_path, el) {
    $('.jqueryFileTree a.selected').removeClass('selected');
    $(el).addClass('selected');
    return load_file(file_path);
  });
  editor = CodeMirror.fromTextArea($('#code-editor')[0], {
    lineNumbers: true,
    theme: "vibrant-ink"
  });
  editor.on('change', function() {
    if (current_plugin_file && !is_loading_file) {
      is_save_pending = true;
      return $('#save-button').addClass('btn-primary');
    }
  });
  editor.on('blur', save_active_file);
  $('#save-button').click(save_active_file);
  return $('#reload-plugin-button').click(function() {
    if (!current_plugin_name) {
      return alert("There is currently no plugin related file open");
    }
    $.post('/', {
      request: 'reloadplugin',
      plugin: current_plugin_name
    }, function(response) {
      $('#reload-plugin-button').text("Reload " + current_plugin_name);
      if (response.error) {
        return alert("Error loading plugin: " + response.error);
      }
    });
    return $('#reload-plugin-button').text("Reloading " + current_plugin_name + "...");
  });
};

$(document).ready(function() {
  var $connection_status, $li, $menu_link, last_successful_request_at;

  $('#tabs a').click(function() {
    return $('.span12').removeClass('span12').addClass('span10');
  });
  $menu_link = $('<a href="#"/>').text('SparkMod');
  $li = $('<li/>').attr('rel', 'sparkmodcontent').append($menu_link);
  $("#tabs").append($li);
  $connection_status = $('<div id="connection-status"/>');
  $connection_status.append($('<div id="redplug" title="There is no connection to the server"/>'));
  $connection_status.append($('<div id="server-loading" title="The server is loading"/>').html($('<div id="loading-spinner"/>')));
  $("#tabs").append($('<li/>').html($connection_status));
  $menu_link.click(function() {
    if (!$sparkmod_content) {
      initialize_sparkmod_tab();
    }
    $('#tabs > li').removeClass('active').each(function() {
      return $('#' + $(this).attr("rel")).hide();
    });
    $li.addClass('active');
    $('.span10').removeClass('span10').addClass('span12');
    $(window).resize();
    return $sparkmod_content.show();
  });
  $('.span10').addClass('content-span');
  $(window).resize(function() {
    if ($sparkmod_content) {
      return $('.well', $sparkmod_content).css({
        height: $(window).height() - 200
      });
    }
  });
  last_successful_request_at = now();
  $(document).ajaxSuccess(function(event, xhr, settings) {
    if (!is_connected_to_server) {
      is_connected_to_server = true;
    }
    if (is_server_loading_response(xhr.responseText)) {
      is_server_loading = true;
      $("#redplug").hide();
      $('#server-loading').show();
    } else if (is_server_loading) {
      is_server_loading = false;
      $('#server-loading').hide();
      on_reconnected();
    }
    return last_successful_request_at = now();
  });
  $(document).ajaxError(function(event, jqxhr, settings, exception) {
    if (is_connected_to_server && now() - last_successful_request_at > 2) {
      is_connected_to_server = false;
      return on_disconnected();
    }
  });
  $('<img src="/images/loading-spinner.gif"/>').load(function() {
    return $('#server-loading').hide().css({
      visibility: 'visible'
    });
  });
  return $('<img src="/images/redplug.png"/>').load(function() {
    return $('#redplug').hide().css({
      visibility: 'visible'
    });
  });
});

load_js('codemirror', 'jquery-filetree');

load_stylesheet('sparkmod', 'jquery-filetree', 'codemirror', 'theme/vibrant-ink');
